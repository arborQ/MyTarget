/// <reference path="../app/typings.d.ts"/>
var arborApplication;
(function (arborApplication) {
    arborApplication.$controllerProvider = null;
    arborApplication.$stateStorage = {};
    var app = angular.module('app', ['ngMaterial', 'ui.router', 'ngResource', 'ngLocalize', 'ngLocalize.Config'])
        .run(["$rootScope", "$state", "$stateParams", "$mdBottomSheet", "$q", "$mdSidenav", function ($rootScope, $state, $stateParams, $mdBottomSheet, $q, $mdSidenav) {
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
        $rootScope.$toggleList = function () {
            var pending = $mdBottomSheet.hide() || $q.when(true);
            pending.then(function () {
                $mdSidenav('left').toggle();
            });
        };
        $rootScope.$on('$locationChangeSuccess', function () { $mdSidenav('left').close(); $mdBottomSheet.hide(); });
    }]).config(["$urlRouterProvider", "$stateProvider", "$controllerProvider", function ($urlRouterProvider, $stateProvider, $controllerProvider) {
        arborApplication.$controllerProvider = $controllerProvider;
        $urlRouterProvider
            .otherwise('/');
        $stateProvider
            .state("home", {
            url: '/',
            template: '<div>home</div>'
        });
        angular.forEach(arborApplication.$stateStorage, function (state, stateName) {
            if (!state.locals) {
                state.locals = {};
            }
            state.locals.loadController = ['$q', function ($q) {
                    var deferred = $q.defer();
                    require(state.require, function () { deferred.resolve(); });
                    return deferred.promise;
                }];
            console.log(state.locals);
            var newState = {
                url: state.url,
                controller: state.controller,
                template: state.template,
                templateUrl: state.templateUrl,
                resolve: state.locals
            };
            $stateProvider.state(stateName, newState);
        });
    }]).value('localeConf', {
        basePath: 'languages',
        defaultLocale: 'pl-PL',
        sharedDictionary: 'app',
        fileExtension: '.lang.json',
        persistSelection: true,
        cookieName: 'COOKIE_LOCALE_LANG',
        observableAttrs: new RegExp('^data-(?!ng-|i18n)'),
        delimiter: '::'
    }).value('localeSupported', [
        'en-US',
        'pl-PL',
    ]);
})(arborApplication || (arborApplication = {}));

var cookBook;
(function (cookBook) {
    arborApplication.$stateStorage["cookBook"] = {
        url: '/cookBook',
        template: '<div>cookBook</div>'
    };
})(cookBook || (cookBook = {}));

/// <reference path="../app/typings.d.ts"/>
/// <reference path="../app/setup.ts"/>
var users;
(function (users) {
    arborApplication.$stateStorage["users"] = {
        url: '/users',
        templateUrl: 'users/views/userList.html',
        controller: "usersController",
        require: ["users/users-controller"],
        locals: {
            usersApi: ['$resource', function ($resource) {
                    return $resource('/api/users');
                }]
        }
    };
    arborApplication.$stateStorage["users.edit"] = {
        url: '/edit/:id',
        templateUrl: 'users/views/userEdit.html',
        controller: "usersEditController",
        require: ["users/usersEdit-controller"],
        locals: {
            usersApi: ['$resource', function ($resource) {
                    return $resource('/api/users/:id');
                }]
        }
    };
})(users || (users = {}));



/// <reference path="../../../typings/angular-material/angular-material.d.ts"/>
/// <reference path="../../../typings/angularjs/angular.d.ts"/>
var application;
(function (application) {
    var directives;
    (function (directives) {
        var app = angular.module('app');
        app.directive('arLaguage', function () {
            return {
                restrict: 'EA',
                templateUrl: 'app/views/changeLaguage.html',
                controller: ["$scope", "$mdDialog", "locale", function ($scope, $mdDialog, locale) {
                    $scope.selectedLanguage = locale.getLocale();
                    $scope.tryChange = function () {
                        $mdDialog.show({
                            locals: { selectedLanguage: $scope.selectedLanguage },
                            templateUrl: 'app/views/languageDialog.html',
                            controller: ["$scope", "$mdDialog", "selectedLanguage", function ($scope, $mdDialog, selectedLanguage) {
                                $scope.selectedLanguage = selectedLanguage;
                                $scope.originalLanguage = selectedLanguage;
                                $scope.change = function () { return $mdDialog.hide($scope.selectedLanguage); };
                                $scope.cancel = function () { return $mdDialog.cancel(); };
                            }]
                        }).then(function (newLocale) {
                            locale.setLocale(newLocale);
                            $scope.selectedLanguage = newLocale;
                        });
                    };
                }]
            };
        });
    })(directives = application.directives || (application.directives = {}));
})(application || (application = {}));

/// <reference path="../../../typings/angularjs/angular.d.ts"/>
var application;
(function (application) {
    var filters;
    (function (filters) {
        var app = angular.module('app');
        app.filter('hasChange', function () {
            return function (item, originalItem) {
                return JSON.stringify(item) !== JSON.stringify(originalItem);
            };
        });
    })(filters = application.filters || (application.filters = {}));
})(application || (application = {}));
